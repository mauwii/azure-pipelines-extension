# Builds the extension and publishes it

name: $(Date:yyyyMMdd)$(Rev:.r)
trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
    - refs/tags/v*
    # - feature/*
    # - bugfix/*
    # - hotfix/*

variables:
  - group: publisher-ids
  - name: buildCounter
    value: $[counter(variables['Build.SourceBranch'])]
  - name: extensionName
    value: ReleaseFlowGitVersion

jobs:
- job: Build
  displayName: Build and test
  pool:
    vmImage: 'ubuntu-20.04'

  steps:
  # To optimise build times on Microsoft-hosted agents, keep the Node.js version in sync
  # with the one installed on their agents. See
  # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
  # for definition of the ubuntu-20.04 image.
  - task: NodeTool@0
    inputs:
      versionSpec: '12.22.x'
      checkLatest: false
    displayName: 'Install Node.js version 12.22.x'

  - task: TfxInstaller@3
    displayName: 'Use Node CLI for Azure DevOps (tfx-cli): v0.9.x'
    inputs:
      version: v0.9.x
      checkLatest: false

  - task: Npm@1
    displayName: 'NPM install'
    inputs:
      command: install

  - script: >-
      npx rfver
      --source-ref $(Build.SourceBranch)
      --target-branch '$(System.PullRequest.TargetBranch)'
      --output azure-pipelines
      --use-origin-branches
      --debug=$(System.Debug)
    displayName: 'Set build number'
    name: release_flow_version

  - task: Npm@1
    displayName: 'Build/test the extension'
    inputs:
      command: custom
      verbose: false
      customCommand: 'test'

  - script: >
      echo $(ReleaseFlowVersion.Major)
      echo $(Major)

  - script: >-
      ./build/extension.js
      --major=$(ReleaseFlowVersion.Major)
      --minor=$(ReleaseFlowVersion.Minor)
      --patch=$(ReleaseFlowVersion.Patch)
      --branchName=$(ReleaseFlowVersion.BranchName)
      --buildType=$(ReleaseFlowVersion.BuildType)
      --preReleaseNumber=$(ReleaseFlowVersion.CommitsSinceVersionSource)
      --preReleaseLabel=$(ReleaseFlowVersion.PreReleaseLabel)
      --publisherTest=$(PublisherId.Develop)
      --publisherRelease=$(PublisherId.Release)
    displayName: Publish extension

  - task: PackageAzureDevOpsExtension@3
    displayName: 'Package extension into VSIX file'
    inputs:
      rootFolder: $(System.DefaultWorkingDirectory)/dist/
      outputPath: $(Build.ArtifactStagingDirectory)/$(extensionName)-$(Build.BuildNumber).vsix
      extensionVisibility: 'public'
      extensionPricing: free
      updateTasksId: true
      patternManifest: vss-extension.json
      # publisherId: test
      # extensionVersion: '$(Build.BuildNumber)'
      # localizationRoot: locale
      # extensionId: 'ext-id'
      # extensionTag: 'ext-tag'
      # extensionName: 'ext-name'
      # extensionVersion: '$(Build.BuildNumber)'
      # updateTasksVersionType: major | minor | patch
      # bypassLocalValidation: true
      # arguments: arg1
      # cwd: '$(System.DefaultWorkingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: vsix'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(extensionName)-$(Build.BuildNumber).vsix'
      ArtifactName: vsix
